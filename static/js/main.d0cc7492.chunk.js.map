{"version":3,"sources":["serviceWorker.js","reducers.js","Components/SearchBox.js","Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/ErrorBoundry.js","Components/Counter.js","Containers/App.js","actions.js","constants.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialState","searchField","initialStateRobots","robots","isPending","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","cardComponent","map","user","i","key","Scroll","props","style","overflow","border","height","children","ErrorBoundry","hasError","info","this","setState","color","Component","Counter","onCount","count","onClick","App","onRequestRobots","filteredRobots","filter","toLowerCase","includes","fontSize","fontFamily","onSearchChange","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d0cc7492.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport { CHANGE_SEARCHFIELD,\n      REQUEST_ROBOTS_PENDING, \n      REQUEST_ROBOTS_SUCCESS,\n      REQUEST_ROBOTS_FAILED\n     } from \"./constants\";\n\nconst initialState = {\n    searchField : ''\n} \n\n\nexport const searchRobots = (state=initialState,action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state , {searchField : action.payload});\ndefault:\n    return state;\n        }\n}\n\nconst initialStateRobots = {\nrobots: [],\nisPending:true\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({},state,{isPending:true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots:action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({},state ,{error:action.payload});\n        default:\n            return state;       \n        \n        }\n\n\n}","import React from 'react';\n\nconst SearchBox = ({searchfield,searchChange}) => {\n    return(\n        <input className='ma2' type='search' placeholder='Search Robos' onChange={searchChange} />\n    )\n}\nexport default SearchBox;\n","import React from 'react';\n\n\nconst Card = ({ name, email, id }) =>{\n    return(\n        <div className = 'bg-light-yellow dib pa1 ma2 br3 grow shadow-2 '>\n          <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}  />\n          <div>\n          <hr />\n            <h2 className='tc'>{name}</h2>\n            <hr />\n            <p className='tc' >{email}</p>\n          </div>  \n            \n        </div>\n    )\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n  \n  const cardComponent = robots.map((user,i) => {\n    return <Card key={i}\n                 id={robots[i].id}\n                 name={robots[i].name}\n                 email={robots[i].email} />\n  })\n  \n  return (\n    <div>\n      {cardComponent}\n    </div>\n  )\n }\n export default CardList;","import React from 'react';\n\n\nconst Scroll = (props) => {\nreturn (\n<div style={{ overflow:'scroll',border:'0.1px solid white',height:'800px' }}>\n   {props.children}\n</div>\n\n)};\n\nexport default Scroll;","import React, { Component } from 'react';\n\n\nclass ErrorBoundry extends Component{\n    constructor(){\n        super();\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({hasError : true})\n    }\n\n    render(){\n        \n            if(this.state.hasError){\n                return <p style={{ color: 'white' }} >Building up things for you . . .</p>\n            }\n            else{\n                return this.props.children;\n            }\n\n\n        \n    }\n\n\n}  \n\nexport default ErrorBoundry;","import React,{ Component } from 'react';\n\nclass Counter extends Component {\n    constructor(){\n        super()\n        this.state = {\n            count: 0\n        }\n    }\n\nonCount =(count) => {\n    this.setState({count:this.state.count + 1})\n}\n\nrender(){\n    return(\n        <button onClick={this.onCount} > Count: {this.state.count} </button>\n    )\n}\n\n\n}\n\nexport default Counter","import React, {Component} from 'react';\nimport SearchBox from '../Components/SearchBox';\nimport { connect } from 'react-redux';\nimport {setSearchField, requestRobots} from '../actions';\nimport CardList from '../Components/CardList';\n\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\n\nimport './App.css';\nimport Counter from '../Components/Counter';\n\n\nconst mapStateToProps = state => {\nreturn{\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending\n\n}}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  \ncomponentDidMount() {\n\n  this.props.onRequestRobots();\n\n}\n\n render() {\n  const {robots, searchField} = this.props;\n  const filteredRobots = robots.filter(robots => {\n     return robots.name.toLowerCase().includes(searchField.toLowerCase())\n   })\n   if(!robots){\n     return <h4>Loading...</h4>\n   }\n    else {\n        return(\n        <div className='tc'>\n          <h1 className = 'tc pa2' style= {{ fontSize: '50px', color: \"white\", fontFamily:'Orbitron' }}><code><strong>RoboFriends!</strong></code></h1>\n          <SearchBox searchChange={this.props.onSearchChange} />\n          <Counter />\n          <Scroll>\n            <ErrorBoundry>\n               <CardList robots = { filteredRobots } />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      \n        )}\n  }\n\n }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","// import { apiCall } from './api/api';\n\nimport { CHANGE_SEARCHFIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FAILED\n   } from './constants.js';\n\n\nexport const setSearchField = (text) =>({ type: CHANGE_SEARCHFIELD,payload: text })\n\n export const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then (data  => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED,  payload: error }))\n }","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Components/Card'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { createLogger } from 'redux-logger';\nimport { requestRobots,searchRobots } from './reducers';\nimport {Provider} from 'react-redux'\nimport App from './Containers/App';\nimport { combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk'; \nimport {createStore, applyMiddleware} from 'redux'\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({ searchRobots,requestRobots });\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\n  <Provider store = {store}> \n    <App />\n  </Provider>,\n  document.getElementById('root')\n  );\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}